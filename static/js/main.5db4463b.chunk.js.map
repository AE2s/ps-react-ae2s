{"version":3,"sources":["../config/componentData.js","docs/examples/EyeIcon/Example.js","docs/examples/Label/ExampleOptional.js","docs/examples/Label/ExampleRequired.js","docs/examples/PasswordInput/ExampleAllFeatures.js","docs/examples/ProgressBar/Example100Percent.js","docs/examples/ProgressBar/Example10Percent.js","docs/examples/ProgressBar/Example70Percent.js","docs/examples/TextInput/ExampleError.js","docs/examples sync /^/.*$","docs/Navigation.js","docs/CodeExample.js","docs/Example.js","docs/Props.js","docs/ComponentPage.js","docs/Docs.js","serviceWorker.js","index.js","docs/examples/TextInput/ExampleOptional.js","components/HelloWorld/HelloWorld.js","docs/examples/HelloWorld/ExampleHelloWorld.js","components/RegistrationForm/RegistrationForm.js","docs/examples/RegistrationForm/ExampleRegistrationForm.js","components/ProgressBar/ProgressBar.js","components/TextInput/TextInput.js","components/Label/Label.js","components/EyeIcon/EyeIcon.js","components/PasswordInput/PasswordInput.js"],"names":["module","exports","EyeIconExample","ExampleOptional","htmlFor","label","required","ExampleAllFeatures","props","state","password","length","this","htmlId","name","onChange","event","setState","target","value","minLength","placeholder","showVisibilityToggle","quality","getQuality","React","Component","Example100Percent","percent","width","height","Example10Percent","Example70Percent","ExampleError","error","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","Navigation","components","className","key","href","CodeExample","hljs","registerLanguage","javascript","highlightBlock","element","ref","children","Example","toggleCode","preventDefault","prevState","showCode","example","description","ExampleComponent","require","componentName","default","onClick","Props","type","defaultValue","ComponentPage","component","examples","Docs","route","window","location","hash","substr","addEventListener","componentData","filter","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message","HelloWorld","defaultProps","ExampleHelloWorld","RegistrationForm","user","onSubmit","validate","submitted","email","errors","minPasswordLength","parseInt","getOwnPropertyNames","confirmationMessage","TextInput","PasswordInput","passwordQuality","maxLength","ExampleRegistrationForm","log","ProgressBar","getColor","getWidthAsPercentOfTotalWidth","style","border","backgroundColor","marginBottom","Label","color","display","EyeIcon","xmlns","viewBox","transform","fill","d","cx","cy","r","toggleShowPassword","showPassword","marginLeft"],"mappings":"sGAAAA,EAAOC,QAA+B,CAAC,CAAC,KAAO,UAAU,YAAc,eAAe,KAAO,y3BAAw4B,SAAW,CAAC,CAAC,KAAO,UAAU,YAAc,GAAG,KAAO,+JAA+J,CAAC,KAAO,aAAa,YAAc,gEAAgE,MAAQ,CAAC,QAAU,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAM,YAAc,qBAAqB,aAAe,CAAC,MAAQ,UAAU,UAAW,KAAS,KAAO,sbAAsb,SAAW,CAAC,CAAC,KAAO,oBAAoB,YAAc,iBAAiB,KAAO,8NAA8N,CAAC,KAAO,QAAQ,YAAc,gEAAgE,MAAQ,CAAC,QAAU,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAK,YAAc,gCAAgC,MAAQ,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAK,YAAc,cAAc,SAAW,CAAC,KAAO,CAAC,KAAO,QAAQ,UAAW,EAAM,YAAc,yCAAyC,KAAO,iqBAAiqB,SAAW,CAAC,CAAC,KAAO,kBAAkB,YAAc,iBAAiB,KAAO,iNAAiN,CAAC,KAAO,kBAAkB,YAAc,iBAAiB,KAAO,4NAA4N,CAAC,KAAO,gBAAgB,YAAc,gFAAgF,MAAQ,CAAC,OAAS,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAK,YAAc,yFAAyF,KAAO,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAK,YAAc,uHAAuH,MAAQ,CAAC,KAAO,CAAC,KAAO,OAAO,UAAW,EAAM,YAAc,kBAAkB,MAAQ,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAM,YAAc,cAAc,aAAe,CAAC,MAAQ,aAAa,UAAW,IAAQ,SAAW,CAAC,KAAO,CAAC,KAAO,QAAQ,UAAW,EAAK,YAAc,qDAAqD,UAAY,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAM,YAAc,+BAA+B,aAAe,CAAC,MAAQ,KAAK,UAAW,IAAQ,YAAc,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAM,YAAc,qDAAqD,qBAAuB,CAAC,KAAO,CAAC,KAAO,QAAQ,UAAW,EAAM,YAAc,+EAA+E,aAAe,CAAC,MAAQ,QAAQ,UAAW,IAAQ,QAAU,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAM,YAAc,yFAAyF,MAAQ,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAM,YAAc,gCAAgC,KAAO,k5FAAk5F,SAAW,CAAC,CAAC,KAAO,qBAAqB,YAAc,uBAAuB,KAAO,s9BAAs9B,CAAC,KAAO,cAAc,YAAc,GAAG,MAAQ,CAAC,QAAU,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAK,YAAc,iCAAiC,MAAQ,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAK,YAAc,aAAa,OAAS,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAM,YAAc,aAAa,aAAe,CAAC,MAAQ,IAAI,UAAW,KAAS,KAAO,uoCAAuoC,SAAW,CAAC,CAAC,KAAO,oBAAoB,YAAc,gCAAgC,KAAO,0PAA0P,CAAC,KAAO,mBAAmB,YAAc,eAAe,KAAO,2NAA2N,CAAC,KAAO,mBAAmB,YAAc,eAAe,KAAO,6NAA6N,CAAC,KAAO,mBAAmB,YAAc,8CAA8C,MAAQ,CAAC,oBAAsB,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAM,YAAc,+CAA+C,aAAe,CAAC,MAAQ,4BAA4B,UAAW,IAAQ,SAAW,CAAC,KAAO,CAAC,KAAO,QAAQ,UAAW,EAAK,YAAc,iCAAiC,kBAAoB,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAM,YAAc,0BAA0B,aAAe,CAAC,MAAQ,IAAI,UAAW,KAAS,KAAO,6vGAA6vG,SAAW,CAAC,CAAC,KAAO,0BAA0B,YAAc,GAAG,KAAO,0UAA0U,CAAC,KAAO,YAAY,YAAc,gIAAgI,MAAQ,CAAC,OAAS,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAK,YAAc,yFAAyF,KAAO,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAK,YAAc,yGAAyG,MAAQ,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAK,YAAc,eAAe,KAAO,CAAC,KAAO,CAAC,KAAO,OAAO,MAAQ,CAAC,CAAC,MAAQ,SAAS,UAAW,GAAO,CAAC,MAAQ,WAAW,UAAW,GAAO,CAAC,MAAQ,aAAa,UAAW,KAAS,UAAW,EAAM,YAAc,aAAa,aAAe,CAAC,MAAQ,SAAS,UAAW,IAAQ,SAAW,CAAC,KAAO,CAAC,KAAO,QAAQ,UAAW,EAAM,YAAc,0CAA0C,aAAe,CAAC,MAAQ,QAAQ,UAAW,IAAQ,SAAW,CAAC,KAAO,CAAC,KAAO,QAAQ,UAAW,EAAK,YAAc,6BAA6B,YAAc,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAM,YAAc,qCAAqC,MAAQ,CAAC,KAAO,CAAC,KAAO,OAAO,UAAW,EAAM,YAAc,SAAS,MAAQ,CAAC,KAAO,CAAC,KAAO,UAAU,UAAW,EAAM,YAAc,uCAAuC,SAAW,CAAC,KAAO,CAAC,KAAO,QAAQ,UAAW,EAAM,YAAc,iDAAiD,KAAO,q+DAAq+D,SAAW,CAAC,CAAC,KAAO,eAAe,YAAc,8BAA8B,KAAO,idAAqd,CAAC,KAAO,kBAAkB,YAAc,mBAAmB,KAAO,8Y,gCCApwnB,0EAGe,SAASC,IACtB,OAAO,kBAAC,IAAD,Q,gCCJT,0EAIe,SAASC,IACtB,OAAO,kBAAC,IAAD,CAAOC,QAAQ,OAAOC,MAAM,W,gCCLrC,0EAIe,SAASF,IACtB,OAAO,kBAAC,IAAD,CAAOC,QAAQ,OAAOC,MAAM,OAAOC,UAAQ,M,8FCD9CC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,SAAU,IAJK,E,yDASjB,IAAMC,EAASC,KAAKH,MAAMC,SAASC,OACnC,OAAOA,EAAS,GAAK,IAAe,GAATA,I,+BAGnB,IAAD,OACP,OACE,6BACE,kBAAC,IAAD,eACEE,OAAO,sCACPC,KAAK,WACLC,SAAU,SAACC,GAAD,OAAW,EAAKC,SAAS,CAAEP,SAAUM,EAAME,OAAOC,SAC5DA,MAAOP,KAAKH,MAAMC,SAClBU,UAAW,EACXC,YAAY,iBACZC,sBAAoB,EACpBC,QAASX,KAAKY,cACVZ,KAAKJ,a,GA1BciB,IAAMC,WAiCxBnB,a,gCCrCf,0EAIe,SAASoB,IACtB,OAAO,kBAAC,IAAD,CAAaC,QAAS,IAAKC,MAAO,IAAKC,OAAQ,O,gCCLxD,0EAIe,SAASC,IACtB,OAAO,kBAAC,IAAD,CAAaH,QAAS,GAAIC,MAAO,Q,gCCL1C,0EAIe,SAASG,IACtB,OAAO,kBAAC,IAAD,CAAaJ,QAAS,GAAIC,MAAO,Q,sICDrBI,E,uKAEjB,OACE,kBAAC,IAAD,CACEpB,OAAO,mBACPR,MAAM,aACNS,KAAK,YACLC,SAAU,aACVT,UAAQ,EACR4B,MAAM,gC,GAT4BT,IAAMC,Y,oBCJhD,IAAIS,EAAM,CACT,oBAAqB,GACrB,uBAAwB,GACxB,iCAAkC,GAClC,oCAAqC,GACrC,0BAA2B,GAC3B,6BAA8B,GAC9B,0BAA2B,GAC3B,6BAA8B,GAC9B,qCAAsC,GACtC,wCAAyC,GACzC,kCAAmC,GACnC,qCAAsC,GACtC,iCAAkC,GAClC,oCAAqC,GACrC,iCAAkC,GAClC,oCAAqC,GACrC,6CAA8C,GAC9C,gDAAiD,GACjD,2BAA4B,GAC5B,8BAA+B,GAC/B,8BAA+B,GAC/B,iCAAkC,IAInC,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBvC,EAAOC,QAAUmC,EACjBA,EAAeE,GAAK,K,iHCtBLU,EAlBI,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WACpB,OACE,wBAAIC,UAAU,cACXD,EAAWd,KAAI,SAACrB,GACf,OACE,wBAAIqC,IAAKrC,GACP,uBAAGsC,KAAI,WAAMtC,IAASA,S,kCCsBnBuC,E,kLArBXC,IAAKC,iBAAiB,aAAcC,KACpCF,IAAKG,eAAe7C,KAAK8C,W,+BAGjB,IAAD,OACP,OACE,yBACEC,IAAK,SAACA,GACJ,EAAKD,QAAUC,IAGjB,8BAAO/C,KAAKJ,MAAMoD,e,GAbAnC,IAAMC,WCsCjBmC,E,kDAzCb,WAAYrD,GAAQ,IAAD,8BACjB,cAAMA,IAIRsD,WAAa,SAAC9C,GACZA,EAAM+C,iBACN,EAAK9C,UAAS,SAAC+C,GACb,MAAO,CAAEC,UAAWD,EAAUC,cANhC,EAAKxD,MAAQ,CAAEwD,UAAU,GAFR,E,qDAYT,IACAA,EAAarD,KAAKH,MAAlBwD,SADD,EAE6BrD,KAAKJ,MAAM0D,QAAvCtB,EAFD,EAECA,KAAMuB,EAFP,EAEOA,YAAarD,EAFpB,EAEoBA,KAErBsD,EAAmBC,OAAQ,YAAczD,KAAKJ,MAAM8D,cAA1B,YAA2CxD,IACxEyD,QACH,OACE,yBAAKrB,UAAU,WACZiB,GAAe,4BAAKA,GAErB,kBAACC,EAAD,MAEA,2BACE,uBAAGhB,KAAK,GAAGoB,QAAS5D,KAAKkD,YACtBG,EAAW,OAAS,OADvB,UAKDA,GAAY,kBAAC,EAAD,KAAcrB,Q,GA/BbnB,IAAMC,WCkCb+C,EAnCD,SAAC,GAAe,IAAbjE,EAAY,EAAZA,MACf,OACE,2BAAO0C,UAAU,SACf,+BACE,4BACE,oCACA,2CACA,oCACA,uCACA,0CAGJ,+BACGJ,OAAOD,KAAKrC,GAAO2B,KAAI,SAACgB,GACvB,OACE,wBAAIA,IAAKA,GACP,4BAAKA,GACL,4BAAK3C,EAAM2C,GAAKgB,aAChB,4BAAK3D,EAAM2C,GAAKuB,KAAK5D,MACrB,4BACGN,EAAM2C,GAAKwB,cAAgBnE,EAAM2C,GAAKwB,aAAaxD,OAEtD,4BAAKX,EAAM2C,GAAK7C,UAAY,YCS3BsE,EA7BO,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACf/D,EAAuC+D,EAAvC/D,KAAMqD,EAAiCU,EAAjCV,YAAa3D,EAAoBqE,EAApBrE,MAAOsE,EAAaD,EAAbC,SAElC,OACE,yBAAK5B,UAAU,iBACb,4BAAKpC,GACL,2BAAIqD,GAEJ,sCAAYW,EAASnE,OAAS,GAAK,KAClCmE,EAASnE,OAAS,EACfmE,EAAS3C,KAAI,SAAC+B,GAAD,OACX,kBAAC,EAAD,CACEf,IAAKe,EAAQtB,KACbsB,QAASA,EACTI,cAAexD,OAGnB,qBAEJ,qCACCN,EAAQ,kBAAC,EAAD,CAAOA,MAAOA,IAAY,qC,iBCpBpBuE,E,kDACnB,WAAYvE,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXuE,MAAOC,OAAOC,SAASC,KAAKC,OAAO,IAHpB,E,gEAOE,IAAD,OAClBH,OAAOI,iBAAiB,cAAc,WACpC,EAAKpE,SAAS,CAAE+D,MAAOC,OAAOC,SAASC,KAAKC,OAAO,U,+BAI7C,IACAJ,EAAUpE,KAAKH,MAAfuE,MACFH,EAAYG,EACdM,IAAcC,QAAO,SAACV,GAAD,OAAeA,EAAU/D,OAASkE,KAAO,GAC9DM,IAAc,GAElB,OACE,6BACE,kBAAC,EAAD,CACErC,WAAYqC,IAAcnD,KAAI,SAAC0C,GAAD,OAAeA,EAAU/D,UAEzD,kBAAC,EAAD,CAAe+D,UAAWA,S,GAzBApD,IAAMC,WCOpB8D,QACW,cAA7BP,OAAOC,SAASO,UAEe,UAA7BR,OAAOC,SAASO,UAEhBR,OAAOC,SAASO,SAASC,MACvB,2D,OCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAApE,GACLqE,QAAQrE,MAAMA,EAAMsE,a,sIErIPrG,E,uKAEjB,OACE,kBAAC,IAAD,CACEU,OAAO,mBACPR,MAAM,aACNS,KAAK,YACLC,SAAU,mB,GAP2BU,IAAMC,Y,mGCA7C+E,EAAa,SAAC,GAAiB,IAAfD,EAAc,EAAdA,QACpB,OAAO,sCAAYA,IASrBC,EAAWC,aAAe,CACxBF,QAAS,SAGIC,QCdA,SAASE,IACtB,OAAO,kBAAC,EAAD,CAAYH,QAAQ,oB,6ICCvBI,E,kDACJ,WAAYpG,GAAQ,IAAD,8BACjB,cAAMA,IAYRO,SAAW,SAACC,GACV,IAAM6F,EAAO,EAAKpG,MAAMoG,KACxBA,EAAK7F,EAAME,OAAOJ,MAAQE,EAAME,OAAOC,MACvC,EAAKF,SAAS,CAAE4F,UAhBC,EA6CnBC,SAAW,WAAO,IACRD,EAAS,EAAKpG,MAAdoG,KACY,EAAKE,SAASF,KAEhC,EAAKrG,MAAMsG,SAASD,GACpB,EAAK5F,SAAS,CAAE+F,WAAW,MA/C7B,EAAKvG,MAAQ,CACXoG,KAAM,CACJI,MAAO,GACPvG,SAAU,IAEZwG,OAAQ,GACRF,WAAW,GATI,E,4DAsBHtG,GACd,OAAKA,EACDA,EAASC,QAAUC,KAAKJ,MAAM2G,kBAA0B,IACjCC,SACxB1G,EAASC,OAASC,KAAKJ,MAAM2G,kBAAqB,IACnD,IAJoB,O,kCASO,IAApBF,EAAmB,EAAnBA,MAAOvG,EAAY,EAAZA,SACVwG,EAAS,GACPC,EAAsBvG,KAAKJ,MAA3B2G,kBAQR,OANKF,IAAOC,EAAOD,MAAQ,mBACvBvG,EAASC,OAASwG,IACpBD,EAAOxG,SAAP,oCAA+CyG,EAA/C,iBAEFvG,KAAKK,SAAS,CAAEiG,WACkD,IAA9CpE,OAAOuE,oBAAoBH,GAAQvG,S,+BAa/C,IAAD,EACuBC,KAAKH,MAA3ByG,EADD,EACCA,OAAQF,EADT,EACSA,UADT,EAEqBpG,KAAKH,MAAMoG,KAA/BI,EAFD,EAECA,MAAOvG,EAFR,EAEQA,SAEf,OAAOsG,EACL,4BAAKpG,KAAKJ,MAAM8G,qBAEhB,6BACE,kBAACC,EAAA,EAAD,CACE1G,OAAO,0BACPC,KAAK,QACLC,SAAUH,KAAKG,SACfV,MAAM,QACNc,MAAO8F,EACP/E,MAAOgF,EAAOD,MACd3G,UAAQ,IAGV,kBAACkH,EAAA,EAAD,CACE3G,OAAO,6BACPC,KAAK,WACLK,MAAOT,EACPK,SAAUH,KAAKG,SACfQ,QAASX,KAAK6G,gBAAgB/G,GAC9BY,sBAAoB,EACpBoG,UAAW,GACXxF,MAAOgF,EAAOxG,WAGhB,2BAAOgE,KAAK,SAASvD,MAAM,WAAWqD,QAAS5D,KAAKkG,gB,GApF7BrF,IAAMC,WAqGrCkF,EAAiBF,aAAe,CAC9BY,oBAAqB,0BACrBH,kBAAmB,GAGNP,QC7GMe,E,4MACnBb,SAAW,SAACD,GACVN,QAAQqB,IAAIf,I,uDAIZ,OAAO,kBAAC,EAAD,CAAkBC,SAAUlG,KAAKkG,e,GANSrF,IAAMC,Y,2KCArDmG,E,4MACJC,SAAW,SAAClG,GACV,OAA2B,MAAvB,EAAKpB,MAAMoB,QAAwB,QAChC,EAAKpB,MAAMoB,QAAU,GAAK,aAAe,O,EAGlDmG,8BAAgC,WAC9B,OAAOX,SAAS,EAAK5G,MAAMqB,OAAS,EAAKrB,MAAMoB,QAAU,KAAM,K,uDAGvD,IAAD,EAC4BhB,KAAKJ,MAAhCoB,EADD,EACCA,QAASC,EADV,EACUA,MAAOC,EADjB,EACiBA,OACxB,OACE,yBAAKkG,MAAO,CAAEC,OAAQ,sBAAuBpG,MAAOA,IAClD,yBACEmG,MAAO,CACLnG,MAAOjB,KAAKmH,gCACZjG,SACAoG,gBAAiBtH,KAAKkH,SAASlG,W,GAlBjBH,IAAMC,WAqChCmG,EAAYnB,aAAe,CACzB5E,OAAQ,GAGK+F,S,oGC6BAN,MApEf,YAYI,IAXF1G,EAWC,EAXDA,OACAC,EAUC,EAVDA,KACAT,EASC,EATDA,MASC,IARDqE,YAQC,MARM,OAQN,MAPDpE,gBAOC,SANDS,EAMC,EANDA,SACAM,EAKC,EALDA,YACAF,EAIC,EAJDA,MACAe,EAGC,EAHDA,MACA0B,EAEC,EAFDA,SACGpD,EACF,+GACD,OACE,yBAAKwH,MAAO,CAAEG,aAAc,KAC1B,kBAACC,EAAA,EAAD,CAAOhI,QAASS,EAAQR,MAAOA,EAAOC,SAAUA,IAChD,yCACEgC,GAAIzB,EACJ6D,KAAMA,EACN5D,KAAMA,EACNO,YAAaA,EACbF,MAAOA,EACPJ,SAAUA,EACViH,MAAO9F,GAAS,CAAE+F,OAAQ,kBACtBzH,IAELoD,EACA1B,GACC,yBAAKgB,UAAU,QAAQ8E,MAAO,CAAEK,MAAO,QACpCnG,M,qFCXIkG,MAnBf,YAA8C,IAA7BhI,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SAC/B,OACE,2BAAO0H,MAAO,CAAEM,QAAS,SAAWlI,QAASA,GAC1CC,EADH,IACWC,GAAY,0BAAM0H,MAAO,CAAEK,MAAO,QAAtB,S,qFCaZE,MAjBf,WAEE,OACE,yBACE1G,MAAM,KACNC,OAAO,KACP0G,MAAM,6BACNC,QAAQ,aAER,uBAAGC,UAAU,gCAAgCC,KAAK,WAChD,0BAAMC,EAAE,6UACR,4BAAQC,GAAG,SAASC,GAAG,SAASC,EAAE,c,8ICPpCvB,E,kDACJ,WAAYhH,GAAQ,IAAD,8BACjB,cAAMA,IAMRwI,mBAAqB,SAAChI,GACpB,EAAKC,UAAS,SAAC+C,GACb,MAAO,CAAEiF,cAAejF,EAAUiF,iBAEhCjI,GAAOA,EAAM+C,kBATjB,EAAKtD,MAAQ,CACXwI,cAAc,GAHC,E,qDAcT,IAAD,EAYHrI,KAAKJ,MAVPK,EAFK,EAELA,OACAM,EAHK,EAGLA,MACAd,EAJK,EAILA,MACA6B,EALK,EAKLA,MACAnB,EANK,EAMLA,SACAM,EAPK,EAOLA,YACAqG,EARK,EAQLA,UACApG,EATK,EASLA,qBACAC,EAVK,EAULA,QACGf,EAXE,wHAaCyI,EAAiBrI,KAAKH,MAAtBwI,aAER,OACE,kBAAC1B,EAAA,EAAD,eACE1G,OAAQA,EACRR,MAAOA,EACPgB,YAAaA,EACbqD,KAAMuE,EAAe,OAAS,WAC9BlI,SAAUA,EACVI,MAAOA,EACPuG,UAAWA,EACXxF,MAAOA,EACP5B,UAAQ,GACJE,GAEHc,GACC,uBACE8B,KAAK,GACLoB,QAAS5D,KAAKoI,mBACdhB,MAAO,CAAEkB,WAAY,IAErB,kBAACX,EAAA,EAAD,OAGHpH,EAAMR,OAAS,GAAKY,GACnB,kBAACsG,EAAA,EAAD,CAAajG,QAASL,EAASM,MAAO,W,GArDpBJ,IAAMC,WA4FlC8F,EAAcd,aAAe,CAC3BgB,UAAW,GACXpG,sBAAsB,EACtBjB,MAAO,YAGMmH,U","file":"static/js/main.5db4463b.chunk.js","sourcesContent":["module.exports = /* eslint-disable */ [{\"name\":\"EyeIcon\",\"description\":\"SVG Eye Icon\",\"code\":\"import React from 'react';\\r\\n\\r\\n/** SVG Eye Icon */\\r\\nfunction EyeIcon() {\\r\\n  // Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\\r\\n  return (\\r\\n    <svg\\r\\n      width=\\\"16\\\"\\r\\n      height=\\\"16\\\"\\r\\n      xmlns=\\\"http://www.w3.org/2000/svg\\\"\\r\\n      viewBox=\\\"0 0 22 22\\\"\\r\\n    >\\r\\n      <g transform=\\\"matrix(.02146 0 0 .02146 1 1)\\\" fill=\\\"#4d4d4d\\\">\\r\\n        <path d=\\\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\\\" />\\r\\n        <circle cx=\\\"466.08\\\" cy=\\\"466.02\\\" r=\\\"134.5\\\" />\\r\\n      </g>\\r\\n    </svg>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default EyeIcon;\\r\\n\",\"examples\":[{\"name\":\"Example\",\"description\":\"\",\"code\":\"import React from 'react';\\r\\nimport EyeIcon from 'ps-react/EyeIcon';\\r\\n\\r\\nexport default function EyeIconExample() {\\r\\n  return <EyeIcon />;\\r\\n}\\r\\n\"}]},{\"name\":\"HelloWorld\",\"description\":\"A super lame component that says Hello with a custom message.\",\"props\":{\"message\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Message to display\",\"defaultValue\":{\"value\":\"'World'\",\"computed\":false}}},\"code\":\"import React from 'react';\\r\\nimport PropTypes from 'prop-types';\\r\\n\\r\\n/** A super lame component that says Hello with a custom message. */\\r\\nconst HelloWorld = ({ message }) => {\\r\\n  return <div>Hello {message}</div>;\\r\\n};\\r\\n\\r\\nHelloWorld.propTypes = {\\r\\n  /** Message to display */\\r\\n\\r\\n  message: PropTypes.string,\\r\\n};\\r\\n\\r\\nHelloWorld.defaultProps = {\\r\\n  message: 'World',\\r\\n};\\r\\n\\r\\nexport default HelloWorld;\\r\\n\",\"examples\":[{\"name\":\"ExampleHelloWorld\",\"description\":\"Custom message\",\"code\":\"import React from 'react';\\r\\nimport HelloWorld from 'ps-react/HelloWorld';\\r\\n\\r\\n/** Custom message */\\r\\nexport default function ExampleHelloWorld() {\\r\\n  return <HelloWorld message=\\\"AE2S viewers!\\\" />;\\r\\n}\\r\\n\"}]},{\"name\":\"Label\",\"description\":\"Label with required field display, htmlFor, and block styling\",\"props\":{\"htmlFor\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"HTML ID for associated input\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Label text\"},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Display asterisk after label if true\"}},\"code\":\"import React from 'react';\\r\\nimport PropTypes from 'prop-types';\\r\\n\\r\\n/** Label with required field display, htmlFor, and block styling */\\r\\nfunction Label({ htmlFor, label, required }) {\\r\\n  return (\\r\\n    <label style={{ display: 'block' }} htmlFor={htmlFor}>\\r\\n      {label} {required && <span style={{ color: 'red' }}> *</span>}\\r\\n    </label>\\r\\n  );\\r\\n}\\r\\n\\r\\nLabel.propTypes = {\\r\\n  /** HTML ID for associated input */\\r\\n  htmlFor: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Label text */\\r\\n  label: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Display asterisk after label if true */\\r\\n  required: PropTypes.bool,\\r\\n};\\r\\n\\r\\nexport default Label;\\r\\n\",\"examples\":[{\"name\":\"ExampleOptional\",\"description\":\"Optional label\",\"code\":\"import React from 'react';\\r\\nimport Label from 'ps-react/Label';\\r\\n\\r\\n/** Optional label */\\r\\nexport default function ExampleOptional() {\\r\\n  return <Label htmlFor=\\\"test\\\" label=\\\"test\\\" />;\\r\\n}\\r\\n\"},{\"name\":\"ExampleRequired\",\"description\":\"Optional label\",\"code\":\"import React from 'react';\\r\\nimport Label from 'ps-react/Label';\\r\\n\\r\\n/** Optional label */\\r\\nexport default function ExampleOptional() {\\r\\n  return <Label htmlFor=\\\"test\\\" label=\\\"test\\\" required />;\\r\\n}\\r\\n\"}]},{\"name\":\"PasswordInput\",\"description\":\"Password input with integrated label, quality tips, and show password toggle.\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used by convention.\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Password value\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Input label\",\"defaultValue\":{\"value\":\"'Password'\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function called when password input value changes\"},\"maxLength\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Max password length accepted\",\"defaultValue\":{\"value\":\"50\",\"computed\":false}},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder displayed when no password is entered\"},\"showVisibilityToggle\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to true to show the toggle for displaying the currently entered password\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"quality\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Display password quality visually via ProgressBar, accepts a number between 0 and 100\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Validation error to display\"}},\"code\":\"import React from 'react';\\r\\nimport PropTypes from 'prop-types';\\r\\nimport ProgressBar from '../ProgressBar';\\r\\nimport EyeIcon from '../EyeIcon';\\r\\nimport TextInput from '../TextInput';\\r\\n\\r\\n/** Password input with integrated label, quality tips, and show password toggle. */\\r\\nclass PasswordInput extends React.Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n    this.state = {\\r\\n      showPassword: false,\\r\\n    };\\r\\n  }\\r\\n\\r\\n  toggleShowPassword = (event) => {\\r\\n    this.setState((prevState) => {\\r\\n      return { showPassword: !prevState.showPassword };\\r\\n    });\\r\\n    if (event) event.preventDefault();\\r\\n  };\\r\\n\\r\\n  render() {\\r\\n    const {\\r\\n      htmlId,\\r\\n      value,\\r\\n      label,\\r\\n      error,\\r\\n      onChange,\\r\\n      placeholder,\\r\\n      maxLength,\\r\\n      showVisibilityToggle,\\r\\n      quality,\\r\\n      ...props\\r\\n    } = this.props;\\r\\n    const { showPassword } = this.state;\\r\\n\\r\\n    return (\\r\\n      <TextInput\\r\\n        htmlId={htmlId}\\r\\n        label={label}\\r\\n        placeholder={placeholder}\\r\\n        type={showPassword ? 'text' : 'password'}\\r\\n        onChange={onChange}\\r\\n        value={value}\\r\\n        maxLength={maxLength}\\r\\n        error={error}\\r\\n        required\\r\\n        {...props}\\r\\n      >\\r\\n        {showVisibilityToggle && (\\r\\n          <a\\r\\n            href=\\\"\\\"\\r\\n            onClick={this.toggleShowPassword}\\r\\n            style={{ marginLeft: 5 }}\\r\\n          >\\r\\n            <EyeIcon />\\r\\n          </a>\\r\\n        )}\\r\\n        {value.length > 0 && quality && (\\r\\n          <ProgressBar percent={quality} width={130} />\\r\\n        )}\\r\\n      </TextInput>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nPasswordInput.propTypes = {\\r\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\r\\n  htmlId: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\\r\\n  name: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Password value */\\r\\n  value: PropTypes.any,\\r\\n\\r\\n  /** Input label */\\r\\n  label: PropTypes.string,\\r\\n\\r\\n  /** Function called when password input value changes */\\r\\n  onChange: PropTypes.func.isRequired,\\r\\n\\r\\n  /** Max password length accepted */\\r\\n  maxLength: PropTypes.number,\\r\\n\\r\\n  /** Placeholder displayed when no password is entered */\\r\\n  placeholder: PropTypes.string,\\r\\n\\r\\n  /** Set to true to show the toggle for displaying the currently entered password */\\r\\n  showVisibilityToggle: PropTypes.bool,\\r\\n\\r\\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\\r\\n  quality: PropTypes.number,\\r\\n\\r\\n  /** Validation error to display */\\r\\n  error: PropTypes.string,\\r\\n};\\r\\n\\r\\nPasswordInput.defaultProps = {\\r\\n  maxLength: 50,\\r\\n  showVisibilityToggle: false,\\r\\n  label: 'Password',\\r\\n};\\r\\n\\r\\nexport default PasswordInput;\\r\\n\",\"examples\":[{\"name\":\"ExampleAllFeatures\",\"description\":\"All features enabled\",\"code\":\"import React from 'react';\\r\\nimport PasswordInput from 'ps-react/PasswordInput';\\r\\n\\r\\n/** All features enabled */\\r\\nclass ExampleAllFeatures extends React.Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n\\r\\n    this.state = {\\r\\n      password: '',\\r\\n    };\\r\\n  }\\r\\n\\r\\n  getQuality() {\\r\\n    const length = this.state.password.length;\\r\\n    return length > 10 ? 100 : length * 10;\\r\\n  }\\r\\n\\r\\n  render() {\\r\\n    return (\\r\\n      <div>\\r\\n        <PasswordInput\\r\\n          htmlId=\\\"password-input-example-all-features\\\"\\r\\n          name=\\\"password\\\"\\r\\n          onChange={(event) => this.setState({ password: event.target.value })}\\r\\n          value={this.state.password}\\r\\n          minLength={8}\\r\\n          placeholder=\\\"Enter password\\\"\\r\\n          showVisibilityToggle\\r\\n          quality={this.getQuality()}\\r\\n          {...this.props}\\r\\n        />\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nexport default ExampleAllFeatures;\\r\\n\"}]},{\"name\":\"ProgressBar\",\"description\":\"\",\"props\":{\"percent\":{\"type\":{\"name\":\"number\"},\"required\":true,\"description\":\"Percent of progress completed\"},\"width\":{\"type\":{\"name\":\"number\"},\"required\":true,\"description\":\"Bar width\"},\"height\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Bar height\",\"defaultValue\":{\"value\":\"5\",\"computed\":false}}},\"code\":\"import React from 'react';\\r\\nimport PropTypes from 'prop-types';\\r\\n\\r\\nclass ProgressBar extends React.Component {\\r\\n  getColor = (percent) => {\\r\\n    if (this.props.percent === 100) return 'green';\\r\\n    return this.props.percent > 50 ? 'lightgreen' : 'red';\\r\\n  };\\r\\n\\r\\n  getWidthAsPercentOfTotalWidth = () => {\\r\\n    return parseInt(this.props.width * (this.props.percent / 100), 10);\\r\\n  };\\r\\n\\r\\n  render() {\\r\\n    const { percent, width, height } = this.props;\\r\\n    return (\\r\\n      <div style={{ border: 'solid 1px lightgray', width: width }}>\\r\\n        <div\\r\\n          style={{\\r\\n            width: this.getWidthAsPercentOfTotalWidth(),\\r\\n            height,\\r\\n            backgroundColor: this.getColor(percent),\\r\\n          }}\\r\\n        />\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nProgressBar.propTypes = {\\r\\n  /** Percent of progress completed */\\r\\n  percent: PropTypes.number.isRequired,\\r\\n\\r\\n  /** Bar width */\\r\\n  width: PropTypes.number.isRequired,\\r\\n\\r\\n  /** Bar height */\\r\\n  height: PropTypes.number,\\r\\n};\\r\\n\\r\\nProgressBar.defaultProps = {\\r\\n  height: 5,\\r\\n};\\r\\n\\r\\nexport default ProgressBar;\\r\\n\",\"examples\":[{\"name\":\"Example100Percent\",\"description\":\"100% progress and height 20px\",\"code\":\"import React from 'react';\\r\\nimport ProgressBar from 'ps-react/ProgressBar';\\r\\n\\r\\n/** 100% progress and height 20px */\\r\\nexport default function Example100Percent() {\\r\\n  return <ProgressBar percent={100} width={150} height={20} />;\\r\\n}\\r\\n\"},{\"name\":\"Example10Percent\",\"description\":\"10% progress\",\"code\":\"import React from 'react';\\r\\nimport ProgressBar from 'ps-react/ProgressBar';\\r\\n\\r\\n/** 10% progress */\\r\\nexport default function Example10Percent() {\\r\\n  return <ProgressBar percent={10} width={150} />;\\r\\n}\\r\\n\"},{\"name\":\"Example70Percent\",\"description\":\"70% progress\",\"code\":\"import React from 'react';\\r\\nimport ProgressBar from 'ps-react/ProgressBar';\\r\\n\\r\\n/** 70% progress */\\r\\nexport default function Example70Percent() {\\r\\n  return <ProgressBar percent={70} width={150} />;\\r\\n}\\r\\n\"}]},{\"name\":\"RegistrationForm\",\"description\":\"Registration form with built-in validation.\",\"props\":{\"confirmationMessage\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Message displayed upon successful submission\",\"defaultValue\":{\"value\":\"'Thanks for registering!'\",\"computed\":false}},\"onSubmit\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Called when form is submitted\"},\"minPasswordLength\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Minimum password length\",\"defaultValue\":{\"value\":\"8\",\"computed\":false}}},\"code\":\"import React from 'react';\\r\\nimport PropTypes from 'prop-types';\\r\\nimport TextInput from '../TextInput';\\r\\nimport PasswordInput from '../PasswordInput';\\r\\n\\r\\n/** Registration form with built-in validation. */\\r\\nclass RegistrationForm extends React.Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n\\r\\n    this.state = {\\r\\n      user: {\\r\\n        email: '',\\r\\n        password: '',\\r\\n      },\\r\\n      errors: {},\\r\\n      submitted: false,\\r\\n    };\\r\\n  }\\r\\n\\r\\n  onChange = (event) => {\\r\\n    const user = this.state.user;\\r\\n    user[event.target.name] = event.target.value;\\r\\n    this.setState({ user });\\r\\n  };\\r\\n\\r\\n  // Returns a number from 0 to 100 that represents password quality.\\r\\n  // For simplicity, just returning % of min length entered.\\r\\n  // Could enhance with checks for number, special char, unique characters, etc.\\r\\n  passwordQuality(password) {\\r\\n    if (!password) return null;\\r\\n    if (password.length >= this.props.minPasswordLength) return 100;\\r\\n    const percentOfMinLength = parseInt(\\r\\n      (password.length / this.props.minPasswordLength) * 100,\\r\\n      10\\r\\n    );\\r\\n    return percentOfMinLength;\\r\\n  }\\r\\n\\r\\n  validate({ email, password }) {\\r\\n    const errors = {};\\r\\n    const { minPasswordLength } = this.props;\\r\\n\\r\\n    if (!email) errors.email = 'Email required.';\\r\\n    if (password.length < minPasswordLength)\\r\\n      errors.password = `Password must be at least ${minPasswordLength} characters.`;\\r\\n\\r\\n    this.setState({ errors });\\r\\n    const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\\r\\n    return formIsValid;\\r\\n  }\\r\\n\\r\\n  onSubmit = () => {\\r\\n    const { user } = this.state;\\r\\n    const formIsValid = this.validate(user);\\r\\n    if (formIsValid) {\\r\\n      this.props.onSubmit(user);\\r\\n      this.setState({ submitted: true });\\r\\n    }\\r\\n  };\\r\\n\\r\\n  render() {\\r\\n    const { errors, submitted } = this.state;\\r\\n    const { email, password } = this.state.user;\\r\\n\\r\\n    return submitted ? (\\r\\n      <h2>{this.props.confirmationMessage}</h2>\\r\\n    ) : (\\r\\n      <div>\\r\\n        <TextInput\\r\\n          htmlId=\\\"registration-form-email\\\"\\r\\n          name=\\\"email\\\"\\r\\n          onChange={this.onChange}\\r\\n          label=\\\"Email\\\"\\r\\n          value={email}\\r\\n          error={errors.email}\\r\\n          required\\r\\n        />\\r\\n\\r\\n        <PasswordInput\\r\\n          htmlId=\\\"registration-form-password\\\"\\r\\n          name=\\\"password\\\"\\r\\n          value={password}\\r\\n          onChange={this.onChange}\\r\\n          quality={this.passwordQuality(password)}\\r\\n          showVisibilityToggle\\r\\n          maxLength={50}\\r\\n          error={errors.password}\\r\\n        />\\r\\n\\r\\n        <input type=\\\"submit\\\" value=\\\"Register\\\" onClick={this.onSubmit} />\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nRegistrationForm.propTypes = {\\r\\n  /** Message displayed upon successful submission */\\r\\n  confirmationMessage: PropTypes.string,\\r\\n\\r\\n  /** Called when form is submitted */\\r\\n  onSubmit: PropTypes.func.isRequired,\\r\\n\\r\\n  /** Minimum password length */\\r\\n  minPasswordLength: PropTypes.number,\\r\\n};\\r\\n\\r\\nRegistrationForm.defaultProps = {\\r\\n  confirmationMessage: 'Thanks for registering!',\\r\\n  minPasswordLength: 8,\\r\\n};\\r\\n\\r\\nexport default RegistrationForm;\\r\\n\",\"examples\":[{\"name\":\"ExampleRegistrationForm\",\"description\":\"\",\"code\":\"import React from 'react';\\r\\nimport RegistrationForm from 'ps-react/RegistrationForm';\\r\\n\\r\\nexport default class ExampleRegistrationForm extends React.Component {\\r\\n  onSubmit = (user) => {\\r\\n    console.log(user);\\r\\n  };\\r\\n\\r\\n  render() {\\r\\n    return <RegistrationForm onSubmit={this.onSubmit} />;\\r\\n  }\\r\\n}\\r\\n\"}]},{\"name\":\"TextInput\",\"description\":\"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used.\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input label\"},\"type\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'text'\",\"computed\":false},{\"value\":\"'number'\",\"computed\":false},{\"value\":\"'password'\",\"computed\":false}]},\"required\":false,\"description\":\"Input type\",\"defaultValue\":{\"value\":\"'text'\",\"computed\":false}},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Mark label with asterisk if set to true\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function to call onChange\"},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder to display when empty\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Value\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"String to display when error occurs\"},\"children\":{\"type\":{\"name\":\"node\"},\"required\":false,\"description\":\"Child component to display next to the input\"}},\"code\":\"import React from 'react';\\r\\nimport PropTypes from 'prop-types';\\r\\nimport Label from '../Label';\\r\\n\\r\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\r\\nfunction TextInput({\\r\\n  htmlId,\\r\\n  name,\\r\\n  label,\\r\\n  type = 'text',\\r\\n  required = false,\\r\\n  onChange,\\r\\n  placeholder,\\r\\n  value,\\r\\n  error,\\r\\n  children,\\r\\n  ...props\\r\\n}) {\\r\\n  return (\\r\\n    <div style={{ marginBottom: 16 }}>\\r\\n      <Label htmlFor={htmlId} label={label} required={required} />\\r\\n      <input\\r\\n        id={htmlId}\\r\\n        type={type}\\r\\n        name={name}\\r\\n        placeholder={placeholder}\\r\\n        value={value}\\r\\n        onChange={onChange}\\r\\n        style={error && { border: 'solid 1px red' }}\\r\\n        {...props}\\r\\n      />\\r\\n      {children}\\r\\n      {error && (\\r\\n        <div className=\\\"error\\\" style={{ color: 'red' }}>\\r\\n          {error}\\r\\n        </div>\\r\\n      )}\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\nTextInput.propTypes = {\\r\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\r\\n  htmlId: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\r\\n  name: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input label */\\r\\n  label: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input type */\\r\\n  type: PropTypes.oneOf(['text', 'number', 'password']),\\r\\n\\r\\n  /** Mark label with asterisk if set to true */\\r\\n  required: PropTypes.bool,\\r\\n\\r\\n  /** Function to call onChange */\\r\\n  onChange: PropTypes.func.isRequired,\\r\\n\\r\\n  /** Placeholder to display when empty */\\r\\n  placeholder: PropTypes.string,\\r\\n\\r\\n  /** Value */\\r\\n  value: PropTypes.any,\\r\\n\\r\\n  /** String to display when error occurs */\\r\\n  error: PropTypes.string,\\r\\n\\r\\n  /** Child component to display next to the input */\\r\\n  children: PropTypes.node,\\r\\n};\\r\\n\\r\\nexport default TextInput;\\r\\n\",\"examples\":[{\"name\":\"ExampleError\",\"description\":\"Required TextBox with error\",\"code\":\"import React from 'react';\\r\\nimport TextInput from 'ps-react/TextInput';\\r\\n\\r\\n/** Required TextBox with error */\\r\\nexport default class ExampleError extends React.Component {\\r\\n  render() {\\r\\n    return (\\r\\n      <TextInput\\r\\n        htmlId=\\\"example-optional\\\"\\r\\n        label=\\\"First Name\\\"\\r\\n        name=\\\"firstname\\\"\\r\\n        onChange={() => {}}\\r\\n        required\\r\\n        error=\\\"First name is required.\\\"\\r\\n      />\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\"},{\"name\":\"ExampleOptional\",\"description\":\"Optional TextBox\",\"code\":\"import React from 'react';\\r\\nimport TextInput from 'ps-react/TextInput';\\r\\n\\r\\n/** Optional TextBox */\\r\\nexport default class ExampleOptional extends React.Component {\\r\\n  render() {\\r\\n    return (\\r\\n      <TextInput\\r\\n        htmlId=\\\"example-optional\\\"\\r\\n        label=\\\"First Name\\\"\\r\\n        name=\\\"firstname\\\"\\r\\n        onChange={() => {}}\\r\\n      />\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\"}]}]","import React from 'react';\r\nimport EyeIcon from 'ps-react/EyeIcon';\r\n\r\nexport default function EyeIconExample() {\r\n  return <EyeIcon />;\r\n}\r\n","import React from 'react';\r\nimport Label from 'ps-react/Label';\r\n\r\n/** Optional label */\r\nexport default function ExampleOptional() {\r\n  return <Label htmlFor=\"test\" label=\"test\" />;\r\n}\r\n","import React from 'react';\r\nimport Label from 'ps-react/Label';\r\n\r\n/** Optional label */\r\nexport default function ExampleOptional() {\r\n  return <Label htmlFor=\"test\" label=\"test\" required />;\r\n}\r\n","import React from 'react';\r\nimport PasswordInput from 'ps-react/PasswordInput';\r\n\r\n/** All features enabled */\r\nclass ExampleAllFeatures extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      password: '',\r\n    };\r\n  }\r\n\r\n  getQuality() {\r\n    const length = this.state.password.length;\r\n    return length > 10 ? 100 : length * 10;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <PasswordInput\r\n          htmlId=\"password-input-example-all-features\"\r\n          name=\"password\"\r\n          onChange={(event) => this.setState({ password: event.target.value })}\r\n          value={this.state.password}\r\n          minLength={8}\r\n          placeholder=\"Enter password\"\r\n          showVisibilityToggle\r\n          quality={this.getQuality()}\r\n          {...this.props}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ExampleAllFeatures;\r\n","import React from 'react';\r\nimport ProgressBar from 'ps-react/ProgressBar';\r\n\r\n/** 100% progress and height 20px */\r\nexport default function Example100Percent() {\r\n  return <ProgressBar percent={100} width={150} height={20} />;\r\n}\r\n","import React from 'react';\r\nimport ProgressBar from 'ps-react/ProgressBar';\r\n\r\n/** 10% progress */\r\nexport default function Example10Percent() {\r\n  return <ProgressBar percent={10} width={150} />;\r\n}\r\n","import React from 'react';\r\nimport ProgressBar from 'ps-react/ProgressBar';\r\n\r\n/** 70% progress */\r\nexport default function Example70Percent() {\r\n  return <ProgressBar percent={70} width={150} />;\r\n}\r\n","import React from 'react';\r\nimport TextInput from 'ps-react/TextInput';\r\n\r\n/** Required TextBox with error */\r\nexport default class ExampleError extends React.Component {\r\n  render() {\r\n    return (\r\n      <TextInput\r\n        htmlId=\"example-optional\"\r\n        label=\"First Name\"\r\n        name=\"firstname\"\r\n        onChange={() => {}}\r\n        required\r\n        error=\"First name is required.\"\r\n      />\r\n    );\r\n  }\r\n}\r\n","var map = {\n\t\"./EyeIcon/Example\": 17,\n\t\"./EyeIcon/Example.js\": 17,\n\t\"./HelloWorld/ExampleHelloWorld\": 26,\n\t\"./HelloWorld/ExampleHelloWorld.js\": 26,\n\t\"./Label/ExampleOptional\": 18,\n\t\"./Label/ExampleOptional.js\": 18,\n\t\"./Label/ExampleRequired\": 19,\n\t\"./Label/ExampleRequired.js\": 19,\n\t\"./PasswordInput/ExampleAllFeatures\": 20,\n\t\"./PasswordInput/ExampleAllFeatures.js\": 20,\n\t\"./ProgressBar/Example100Percent\": 21,\n\t\"./ProgressBar/Example100Percent.js\": 21,\n\t\"./ProgressBar/Example10Percent\": 22,\n\t\"./ProgressBar/Example10Percent.js\": 22,\n\t\"./ProgressBar/Example70Percent\": 23,\n\t\"./ProgressBar/Example70Percent.js\": 23,\n\t\"./RegistrationForm/ExampleRegistrationForm\": 27,\n\t\"./RegistrationForm/ExampleRegistrationForm.js\": 27,\n\t\"./TextInput/ExampleError\": 24,\n\t\"./TextInput/ExampleError.js\": 24,\n\t\"./TextInput/ExampleOptional\": 25,\n\t\"./TextInput/ExampleOptional.js\": 25\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 242;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Navigation = ({ components }) => {\r\n  return (\r\n    <ul className=\"navigation\">\r\n      {components.map((name) => {\r\n        return (\r\n          <li key={name}>\r\n            <a href={`#${name}`}>{name}</a>\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nNavigation.propTypes = {\r\n  components: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default Navigation;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport hljs from 'highlight.js';\r\nimport javascript from 'highlight.js/lib/languages/javascript';\r\n\r\n// This way is easy, but adds 170K gzipped to bundle since all langs are included.\r\n// import Highlight from 'react-highlight';\r\n\r\nclass CodeExample extends React.Component {\r\n  componentDidMount() {\r\n    hljs.registerLanguage('javascript', javascript);\r\n    hljs.highlightBlock(this.element);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <pre\r\n        ref={(ref) => {\r\n          this.element = ref;\r\n        }}\r\n      >\r\n        <code>{this.props.children}</code>\r\n      </pre>\r\n    );\r\n  }\r\n}\r\n\r\nCodeExample.propTypes = {\r\n  children: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default CodeExample;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CodeExample from './CodeExample';\r\n\r\nclass Example extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { showCode: false };\r\n  }\r\n\r\n  toggleCode = (event) => {\r\n    event.preventDefault();\r\n    this.setState((prevState) => {\r\n      return { showCode: !prevState.showCode };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { showCode } = this.state;\r\n    const { code, description, name } = this.props.example;\r\n    // Must use CommonJS require to dynamically require because ES Modules must be statically analyzable.\r\n    const ExampleComponent = require(`./examples/${this.props.componentName}/${name}`)\r\n      .default;\r\n    return (\r\n      <div className=\"example\">\r\n        {description && <h4>{description}</h4>}\r\n\r\n        <ExampleComponent />\r\n\r\n        <p>\r\n          <a href=\"\" onClick={this.toggleCode}>\r\n            {showCode ? 'Hide' : 'Show'} Code\r\n          </a>\r\n        </p>\r\n\r\n        {showCode && <CodeExample>{code}</CodeExample>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nExample.propTypes = {\r\n  example: PropTypes.object.isRequired,\r\n  componentName: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Example;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Props = ({ props }) => {\r\n  return (\r\n    <table className=\"props\">\r\n      <thead>\r\n        <tr>\r\n          <th>Name</th>\r\n          <th>Description</th>\r\n          <th>Type</th>\r\n          <th>Default</th>\r\n          <th>Required</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {Object.keys(props).map((key) => {\r\n          return (\r\n            <tr key={key}>\r\n              <td>{key}</td>\r\n              <td>{props[key].description}</td>\r\n              <td>{props[key].type.name}</td>\r\n              <td>\r\n                {props[key].defaultValue && props[key].defaultValue.value}\r\n              </td>\r\n              <td>{props[key].required && 'X'}</td>\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nProps.propTypes = {\r\n  props: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default Props;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Example from './Example';\r\nimport Props from './Props';\r\n\r\nconst ComponentPage = ({ component }) => {\r\n  const { name, description, props, examples } = component;\r\n\r\n  return (\r\n    <div className=\"componentpage\">\r\n      <h2>{name}</h2>\r\n      <p>{description}</p>\r\n\r\n      <h3>Example{examples.length > 1 && 's'}</h3>\r\n      {examples.length > 0\r\n        ? examples.map((example) => (\r\n            <Example\r\n              key={example.code}\r\n              example={example}\r\n              componentName={name}\r\n            />\r\n          ))\r\n        : 'No examples exist.'}\r\n\r\n      <h3>Props</h3>\r\n      {props ? <Props props={props} /> : 'This component accepts no props.'}\r\n    </div>\r\n  );\r\n};\r\n\r\nComponentPage.propTypes = {\r\n  component: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default ComponentPage;\r\n","import React from 'react';\r\nimport Navigation from './Navigation';\r\nimport ComponentPage from './ComponentPage';\r\nimport componentData from '../../config/componentData';\r\n\r\nexport default class Docs extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      route: window.location.hash.substr(1),\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('hashchange', () => {\r\n      this.setState({ route: window.location.hash.substr(1) });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { route } = this.state;\r\n    const component = route\r\n      ? componentData.filter((component) => component.name === route)[0]\r\n      : componentData[0];\r\n\r\n    return (\r\n      <div>\r\n        <Navigation\r\n          components={componentData.map((component) => component.name)}\r\n        />\r\n        <ComponentPage component={component} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Docs from './docs/Docs';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/highlight.js/styles/ocean.css';\nReactDOM.render(\n  <React.StrictMode>\n    <Docs />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\r\nimport TextInput from 'ps-react/TextInput';\r\n\r\n/** Optional TextBox */\r\nexport default class ExampleOptional extends React.Component {\r\n  render() {\r\n    return (\r\n      <TextInput\r\n        htmlId=\"example-optional\"\r\n        label=\"First Name\"\r\n        name=\"firstname\"\r\n        onChange={() => {}}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/** A super lame component that says Hello with a custom message. */\r\nconst HelloWorld = ({ message }) => {\r\n  return <div>Hello {message}</div>;\r\n};\r\n\r\nHelloWorld.propTypes = {\r\n  /** Message to display */\r\n\r\n  message: PropTypes.string,\r\n};\r\n\r\nHelloWorld.defaultProps = {\r\n  message: 'World',\r\n};\r\n\r\nexport default HelloWorld;\r\n","import React from 'react';\r\nimport HelloWorld from 'ps-react/HelloWorld';\r\n\r\n/** Custom message */\r\nexport default function ExampleHelloWorld() {\r\n  return <HelloWorld message=\"AE2S viewers!\" />;\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TextInput from '../TextInput';\r\nimport PasswordInput from '../PasswordInput';\r\n\r\n/** Registration form with built-in validation. */\r\nclass RegistrationForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      user: {\r\n        email: '',\r\n        password: '',\r\n      },\r\n      errors: {},\r\n      submitted: false,\r\n    };\r\n  }\r\n\r\n  onChange = (event) => {\r\n    const user = this.state.user;\r\n    user[event.target.name] = event.target.value;\r\n    this.setState({ user });\r\n  };\r\n\r\n  // Returns a number from 0 to 100 that represents password quality.\r\n  // For simplicity, just returning % of min length entered.\r\n  // Could enhance with checks for number, special char, unique characters, etc.\r\n  passwordQuality(password) {\r\n    if (!password) return null;\r\n    if (password.length >= this.props.minPasswordLength) return 100;\r\n    const percentOfMinLength = parseInt(\r\n      (password.length / this.props.minPasswordLength) * 100,\r\n      10\r\n    );\r\n    return percentOfMinLength;\r\n  }\r\n\r\n  validate({ email, password }) {\r\n    const errors = {};\r\n    const { minPasswordLength } = this.props;\r\n\r\n    if (!email) errors.email = 'Email required.';\r\n    if (password.length < minPasswordLength)\r\n      errors.password = `Password must be at least ${minPasswordLength} characters.`;\r\n\r\n    this.setState({ errors });\r\n    const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\r\n    return formIsValid;\r\n  }\r\n\r\n  onSubmit = () => {\r\n    const { user } = this.state;\r\n    const formIsValid = this.validate(user);\r\n    if (formIsValid) {\r\n      this.props.onSubmit(user);\r\n      this.setState({ submitted: true });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { errors, submitted } = this.state;\r\n    const { email, password } = this.state.user;\r\n\r\n    return submitted ? (\r\n      <h2>{this.props.confirmationMessage}</h2>\r\n    ) : (\r\n      <div>\r\n        <TextInput\r\n          htmlId=\"registration-form-email\"\r\n          name=\"email\"\r\n          onChange={this.onChange}\r\n          label=\"Email\"\r\n          value={email}\r\n          error={errors.email}\r\n          required\r\n        />\r\n\r\n        <PasswordInput\r\n          htmlId=\"registration-form-password\"\r\n          name=\"password\"\r\n          value={password}\r\n          onChange={this.onChange}\r\n          quality={this.passwordQuality(password)}\r\n          showVisibilityToggle\r\n          maxLength={50}\r\n          error={errors.password}\r\n        />\r\n\r\n        <input type=\"submit\" value=\"Register\" onClick={this.onSubmit} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nRegistrationForm.propTypes = {\r\n  /** Message displayed upon successful submission */\r\n  confirmationMessage: PropTypes.string,\r\n\r\n  /** Called when form is submitted */\r\n  onSubmit: PropTypes.func.isRequired,\r\n\r\n  /** Minimum password length */\r\n  minPasswordLength: PropTypes.number,\r\n};\r\n\r\nRegistrationForm.defaultProps = {\r\n  confirmationMessage: 'Thanks for registering!',\r\n  minPasswordLength: 8,\r\n};\r\n\r\nexport default RegistrationForm;\r\n","import React from 'react';\r\nimport RegistrationForm from 'ps-react/RegistrationForm';\r\n\r\nexport default class ExampleRegistrationForm extends React.Component {\r\n  onSubmit = (user) => {\r\n    console.log(user);\r\n  };\r\n\r\n  render() {\r\n    return <RegistrationForm onSubmit={this.onSubmit} />;\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass ProgressBar extends React.Component {\r\n  getColor = (percent) => {\r\n    if (this.props.percent === 100) return 'green';\r\n    return this.props.percent > 50 ? 'lightgreen' : 'red';\r\n  };\r\n\r\n  getWidthAsPercentOfTotalWidth = () => {\r\n    return parseInt(this.props.width * (this.props.percent / 100), 10);\r\n  };\r\n\r\n  render() {\r\n    const { percent, width, height } = this.props;\r\n    return (\r\n      <div style={{ border: 'solid 1px lightgray', width: width }}>\r\n        <div\r\n          style={{\r\n            width: this.getWidthAsPercentOfTotalWidth(),\r\n            height,\r\n            backgroundColor: this.getColor(percent),\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nProgressBar.propTypes = {\r\n  /** Percent of progress completed */\r\n  percent: PropTypes.number.isRequired,\r\n\r\n  /** Bar width */\r\n  width: PropTypes.number.isRequired,\r\n\r\n  /** Bar height */\r\n  height: PropTypes.number,\r\n};\r\n\r\nProgressBar.defaultProps = {\r\n  height: 5,\r\n};\r\n\r\nexport default ProgressBar;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Label from '../Label';\r\n\r\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\r\nfunction TextInput({\r\n  htmlId,\r\n  name,\r\n  label,\r\n  type = 'text',\r\n  required = false,\r\n  onChange,\r\n  placeholder,\r\n  value,\r\n  error,\r\n  children,\r\n  ...props\r\n}) {\r\n  return (\r\n    <div style={{ marginBottom: 16 }}>\r\n      <Label htmlFor={htmlId} label={label} required={required} />\r\n      <input\r\n        id={htmlId}\r\n        type={type}\r\n        name={name}\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onChange={onChange}\r\n        style={error && { border: 'solid 1px red' }}\r\n        {...props}\r\n      />\r\n      {children}\r\n      {error && (\r\n        <div className=\"error\" style={{ color: 'red' }}>\r\n          {error}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nTextInput.propTypes = {\r\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\r\n  htmlId: PropTypes.string.isRequired,\r\n\r\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\r\n  name: PropTypes.string.isRequired,\r\n\r\n  /** Input label */\r\n  label: PropTypes.string.isRequired,\r\n\r\n  /** Input type */\r\n  type: PropTypes.oneOf(['text', 'number', 'password']),\r\n\r\n  /** Mark label with asterisk if set to true */\r\n  required: PropTypes.bool,\r\n\r\n  /** Function to call onChange */\r\n  onChange: PropTypes.func.isRequired,\r\n\r\n  /** Placeholder to display when empty */\r\n  placeholder: PropTypes.string,\r\n\r\n  /** Value */\r\n  value: PropTypes.any,\r\n\r\n  /** String to display when error occurs */\r\n  error: PropTypes.string,\r\n\r\n  /** Child component to display next to the input */\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default TextInput;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/** Label with required field display, htmlFor, and block styling */\r\nfunction Label({ htmlFor, label, required }) {\r\n  return (\r\n    <label style={{ display: 'block' }} htmlFor={htmlFor}>\r\n      {label} {required && <span style={{ color: 'red' }}> *</span>}\r\n    </label>\r\n  );\r\n}\r\n\r\nLabel.propTypes = {\r\n  /** HTML ID for associated input */\r\n  htmlFor: PropTypes.string.isRequired,\r\n\r\n  /** Label text */\r\n  label: PropTypes.string.isRequired,\r\n\r\n  /** Display asterisk after label if true */\r\n  required: PropTypes.bool,\r\n};\r\n\r\nexport default Label;\r\n","import React from 'react';\r\n\r\n/** SVG Eye Icon */\r\nfunction EyeIcon() {\r\n  // Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\r\n  return (\r\n    <svg\r\n      width=\"16\"\r\n      height=\"16\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      viewBox=\"0 0 22 22\"\r\n    >\r\n      <g transform=\"matrix(.02146 0 0 .02146 1 1)\" fill=\"#4d4d4d\">\r\n        <path d=\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\" />\r\n        <circle cx=\"466.08\" cy=\"466.02\" r=\"134.5\" />\r\n      </g>\r\n    </svg>\r\n  );\r\n}\r\n\r\nexport default EyeIcon;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ProgressBar from '../ProgressBar';\r\nimport EyeIcon from '../EyeIcon';\r\nimport TextInput from '../TextInput';\r\n\r\n/** Password input with integrated label, quality tips, and show password toggle. */\r\nclass PasswordInput extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showPassword: false,\r\n    };\r\n  }\r\n\r\n  toggleShowPassword = (event) => {\r\n    this.setState((prevState) => {\r\n      return { showPassword: !prevState.showPassword };\r\n    });\r\n    if (event) event.preventDefault();\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      htmlId,\r\n      value,\r\n      label,\r\n      error,\r\n      onChange,\r\n      placeholder,\r\n      maxLength,\r\n      showVisibilityToggle,\r\n      quality,\r\n      ...props\r\n    } = this.props;\r\n    const { showPassword } = this.state;\r\n\r\n    return (\r\n      <TextInput\r\n        htmlId={htmlId}\r\n        label={label}\r\n        placeholder={placeholder}\r\n        type={showPassword ? 'text' : 'password'}\r\n        onChange={onChange}\r\n        value={value}\r\n        maxLength={maxLength}\r\n        error={error}\r\n        required\r\n        {...props}\r\n      >\r\n        {showVisibilityToggle && (\r\n          <a\r\n            href=\"\"\r\n            onClick={this.toggleShowPassword}\r\n            style={{ marginLeft: 5 }}\r\n          >\r\n            <EyeIcon />\r\n          </a>\r\n        )}\r\n        {value.length > 0 && quality && (\r\n          <ProgressBar percent={quality} width={130} />\r\n        )}\r\n      </TextInput>\r\n    );\r\n  }\r\n}\r\n\r\nPasswordInput.propTypes = {\r\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\r\n  htmlId: PropTypes.string.isRequired,\r\n\r\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\r\n  name: PropTypes.string.isRequired,\r\n\r\n  /** Password value */\r\n  value: PropTypes.any,\r\n\r\n  /** Input label */\r\n  label: PropTypes.string,\r\n\r\n  /** Function called when password input value changes */\r\n  onChange: PropTypes.func.isRequired,\r\n\r\n  /** Max password length accepted */\r\n  maxLength: PropTypes.number,\r\n\r\n  /** Placeholder displayed when no password is entered */\r\n  placeholder: PropTypes.string,\r\n\r\n  /** Set to true to show the toggle for displaying the currently entered password */\r\n  showVisibilityToggle: PropTypes.bool,\r\n\r\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\r\n  quality: PropTypes.number,\r\n\r\n  /** Validation error to display */\r\n  error: PropTypes.string,\r\n};\r\n\r\nPasswordInput.defaultProps = {\r\n  maxLength: 50,\r\n  showVisibilityToggle: false,\r\n  label: 'Password',\r\n};\r\n\r\nexport default PasswordInput;\r\n"],"sourceRoot":""}